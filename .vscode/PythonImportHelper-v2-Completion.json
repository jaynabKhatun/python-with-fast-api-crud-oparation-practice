[
    {
        "label": "MongoClient",
        "importPath": "pymongo.mongo_client",
        "description": "pymongo.mongo_client",
        "isExtraImport": true,
        "detail": "pymongo.mongo_client",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "objectid",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "entry_route",
        "importPath": "routes.entry",
        "description": "routes.entry",
        "isExtraImport": true,
        "detail": "routes.entry",
        "documentation": {}
    },
    {
        "label": "MONGO_URI",
        "kind": 5,
        "importPath": "database.connection",
        "description": "database.connection",
        "peekOfCode": "MONGO_URI = \"mongodb+srv://erpBackend:nxBpsyvI0oJrXxyy@cluster0.uo3rphs.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\"\n# Create a new client and connect to the server\nclient = MongoClient(MONGO_URI)\ndb = client.practice_fastapi\nrawItem_collection = db.RawItems\n# meal_collection = db.meals\n# feedback_collection = db.feedback_collection\n# user_collection = db.user_collection",
        "detail": "database.connection",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "database.connection",
        "description": "database.connection",
        "peekOfCode": "client = MongoClient(MONGO_URI)\ndb = client.practice_fastapi\nrawItem_collection = db.RawItems\n# meal_collection = db.meals\n# feedback_collection = db.feedback_collection\n# user_collection = db.user_collection",
        "detail": "database.connection",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "database.connection",
        "description": "database.connection",
        "peekOfCode": "db = client.practice_fastapi\nrawItem_collection = db.RawItems\n# meal_collection = db.meals\n# feedback_collection = db.feedback_collection\n# user_collection = db.user_collection",
        "detail": "database.connection",
        "documentation": {}
    },
    {
        "label": "rawItem_collection",
        "kind": 5,
        "importPath": "database.connection",
        "description": "database.connection",
        "peekOfCode": "rawItem_collection = db.RawItems\n# meal_collection = db.meals\n# feedback_collection = db.feedback_collection\n# user_collection = db.user_collection",
        "detail": "database.connection",
        "documentation": {}
    },
    {
        "label": "FeedbackBase",
        "kind": 6,
        "importPath": "models.feedback_model",
        "description": "models.feedback_model",
        "peekOfCode": "class FeedbackBase(BaseModel):\n    comment: Optional[str] = None\n    rating: int = Field(..., ge=1, le=5,\n                        description=\"Rating must be between 1 and 5\")\n    userId: str\n    mealId: str\n    feedbackTime: datetime",
        "detail": "models.feedback_model",
        "documentation": {}
    },
    {
        "label": "MealModel",
        "kind": 6,
        "importPath": "models.meal_model",
        "description": "models.meal_model",
        "peekOfCode": "class MealModel(BaseModel):\n    name: str\n    rawItem: List[str]\n    price: int",
        "detail": "models.meal_model",
        "documentation": {}
    },
    {
        "label": "RawItemModel",
        "kind": 6,
        "importPath": "models.raw_items_model",
        "description": "models.raw_items_model",
        "peekOfCode": "class RawItemModel(BaseModel):\n    title: str\n    details: str\n    price: int\n    quantity: int\n    addedBy: int",
        "detail": "models.raw_items_model",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models.users_model",
        "description": "models.users_model",
        "peekOfCode": "class User(BaseModel):\n    name: str\n    address: str\n    phone: str\n    role: str\n    department: str\n    category: Optional[str] = None  # Optional Field",
        "detail": "models.users_model",
        "documentation": {}
    },
    {
        "label": "rootApiRunner",
        "kind": 2,
        "importPath": "routes.entry",
        "description": "routes.entry",
        "peekOfCode": "def rootApiRunner():\n    response = {\n        \"status\": \"Ok\",\n        \"status-code\": 200,\n        \"message\": \"Api is running\"\n    }\n    return response",
        "detail": "routes.entry",
        "documentation": {}
    },
    {
        "label": "entry_route",
        "kind": 5,
        "importPath": "routes.entry",
        "description": "routes.entry",
        "peekOfCode": "entry_route = APIRouter()\n# Api endpoint\n@entry_route.get('/')\ndef rootApiRunner():\n    response = {\n        \"status\": \"Ok\",\n        \"status-code\": 200,\n        \"message\": \"Api is running\"\n    }\n    return response",
        "detail": "routes.entry",
        "documentation": {}
    },
    {
        "label": "create_feedback",
        "kind": 2,
        "importPath": "routes.feedback_route",
        "description": "routes.feedback_route",
        "peekOfCode": "def create_feedback(feedback_data: dict) -> dict:\n    meal_id = feedback_data.get(\"mealId\")\n    if not objectid.isValid(meal_id):\n        raise ValueError(\"Invalid meal ID\")",
        "detail": "routes.feedback_route",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len('Scripts') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len('Scripts') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.include_router(entry_route)",
        "detail": "main",
        "documentation": {}
    }
]